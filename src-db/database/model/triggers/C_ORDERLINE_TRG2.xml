<?xml version="1.0"?>
  <database name="TRIGGER C_ORDERLINE_TRG2">
    <trigger name="C_ORDERLINE_TRG2" table="C_ORDERLINE" fires="after" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SLU
    * All portions are Copyright (C) 2001-2014 Openbravo SLU
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/

  v_istaxincluded CHAR(1) ;
  v_Processed C_ORDER.PROCESSED%TYPE;
  v_ID VARCHAR2(32);
  v_oldLine NUMBER;
  v_newLineNetAmt NUMBER;
  v_newLineAlternate NUMBER;
  v_oldGrossAmt NUMBER:=0;
  v_newGrossAmt NUMBER:=0;
  v_totallines NUMBER:=0;
  v_grandtotal NUMBER:=0;
  v_taxAmt NUMBER;
  v_Prec C_CURRENCY.STDPRECISION%TYPE;
  v_AttrSetValueType M_Product.AttrSetValueType%TYPE;
  v_oldLineAlternate NUMBER;
  v_create CHAR(1):='Y';
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;

IF (DELETING) THEN
  v_ID:=:OLD.C_ORDER_ID;
ELSE
  v_ID:=:NEW.C_ORDER_ID;
END IF;


  /**************************************************************************
   * Calculate Tax, etc.
   */
 SELECT processed, stdPrecision, m_pricelist.istaxincluded
   INTO v_processed, v_prec, v_istaxincluded
 FROM c_order
        JOIN c_currency ON c_order.c_currency_id = c_currency.c_currency_id
        JOIN m_pricelist ON c_order.m_pricelist_id = m_pricelist.m_pricelist_id
 WHERE C_Order_ID=v_ID;


 IF(v_Processed='N') THEN
   v_oldLine:=0;
   v_newLineNetAmt:=0;
   IF (v_istaxincluded = 'Y') THEN
    IF (DELETING) THEN
      v_oldgrossamt := :old.line_gross_amount;
    ELSIF (UPDATING) THEN
      v_oldgrossamt := :old.line_gross_amount;
      v_newgrossamt := :new.line_gross_amount;
    ELSE
      v_newgrossamt := :new.line_gross_amount;
    END IF;
   END IF;
 
  -- Calculate taxes
  IF(UPDATING OR DELETING) THEN
    v_oldLine:= COALESCE(:old.LineNetAmt,0) + COALESCE(:old.FreightAmt,0) + COALESCE(:old.ChargeAmt,0);
  END IF;  
  IF (INSERTING OR UPDATING) THEN
    v_newLineNetAmt := COALESCE(:new.LineNetAmt,0) + COALESCE(:new.FreightAmt,0) + COALESCE(:new.ChargeAmt,0);
    v_newLineAlternate := COALESCE(:new.TaxBaseAmt,0) + COALESCE(:new.FreightAmt,0) + COALESCE(:new.ChargeAmt,0);

    IF (UPDATING) THEN
      v_oldLineAlternate := COALESCE(:old.TaxBaseAmt,0) + COALESCE(:old.FreightAmt,0) + COALESCE(:old.ChargeAmt,0);
      IF (:new.AD_Org_ID <> :old.AD_Org_ID OR :new.C_Tax_ID <> :old.C_Tax_ID OR
          v_newLineNetAmt <> v_oldLine OR v_newLineAlternate <> v_oldLineAlternate OR
          :new.line_gross_amount <> :old.line_gross_amount) THEN
        DELETE FROM C_ORDERLINETAX WHERE C_ORDERLINE_ID = :new.C_OrderLine_ID;
        v_create := 'Y';
      ELSE
        v_create := 'N';
      END IF;
    END IF;

    IF (v_create = 'Y') THEN
      C_ORDERLINETAX_INSERT(:new.AD_Org_ID, :new.C_Order_ID, :new.C_OrderLine_ID, :new.UpdatedBy, :new.C_Tax_ID, :new.C_Tax_ID, v_newLineNetAmt, v_newLineAlternate, v_Prec);
      IF (v_istaxincluded = 'Y') THEN
        C_ORDERLINETAX_ROUNDING(:new.C_OrderLine_ID, :new.line_gross_amount, v_newLineNetAmt);
      END IF;
      -- Get Total Tax Amt
      SELECT SUM(TaxAmt) INTO v_taxAmt
      FROM C_OrderTax
      WHERE C_Order_ID=:new.C_Order_ID;
      -- DBMS_OUTPUT.PUT_LINE('TaxAmt = ' || v_taxAmt);
      -- Update Header
      UPDATE C_Order
      SET TotalLines = TotalLines - v_oldLine + v_newLineNetAmt,
          GrandTotal = CASE v_istaxincluded
                       WHEN 'Y' THEN grandtotal - v_oldgrossamt + v_newgrossamt
                       ELSE TotalLines - v_oldLine + v_newLineNetAmt + COALESCE(v_taxAmt, 0)
                       END
      WHERE C_Order_ID = :new.C_Order_ID;
    END IF;
  ELSE -- DELETING
    SELECT SUM(TaxAmt) INTO v_taxAmt
    FROM C_OrderTax
    WHERE C_Order_ID=:old.C_Order_ID;
    -- DBMS_OUTPUT.PUT_LINE('TaxAmt = ' || v_taxAmt);
    -- Update Header
    UPDATE C_Order
    SET TotalLines = TotalLines - v_oldLine + v_newLineNetAmt,
        GrandTotal = CASE v_istaxincluded
                       WHEN 'Y' THEN grandtotal - v_oldgrossamt
                       ELSE TotalLines - v_oldLine + v_newLineNetAmt + COALESCE(v_taxAmt, 0)
                     END
    WHERE C_Order_ID=:old.C_Order_ID;
  END IF;
  IF (v_istaxincluded = 'Y') THEN
    SELECT totallines, grandtotal INTO v_totallines, v_grandtotal
    FROM c_order
    WHERE c_order_id = v_id;
    C_ORDERTAX_ROUNDING(v_id, v_grandtotal, v_totallines);
  END IF;

 END IF;

 IF (INSERTING OR UPDATING) THEN
  --Does not allow to change the attribute set value
  -- for products which attribute set value type is Fixed
  IF (:NEW.M_PRODUCT_ID IS NOT NULL AND COALESCE(:new.M_AttributeSetInstance_ID,'0')!='0') THEN
   SELECT ATTRSETVALUETYPE 
   INTO v_AttrSetValueType
   FROM M_PRODUCT 
   WHERE M_PRODUCT_ID=:NEW.M_PRODUCT_ID;
   IF (v_AttrSetValueType='F') THEN
    RAISE_APPLICATION_ERROR(-20000, '@AttrSetValueFixed@');
   END IF;
  END IF;
 END IF;

END C_ORDERLINE_TRG2
]]></body>
    </trigger>
  </database>
