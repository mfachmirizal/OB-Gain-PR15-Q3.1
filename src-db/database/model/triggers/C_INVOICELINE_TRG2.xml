<?xml version="1.0"?>
  <database name="TRIGGER C_INVOICELINE_TRG2">
    <trigger name="C_INVOICELINE_TRG2" table="C_INVOICELINE" fires="after" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2015 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/




  v_Processed C_ORDER.PROCESSED%TYPE;
  v_ID VARCHAR2(32);
  v_oldLine NUMBER;
  v_newLineNetAmt NUMBER;
  v_newLineAlternate NUMBER;
  v_taxAmt NUMBER;
  v_Prec C_CURRENCY.STDPRECISION%TYPE;
  v_istaxincluded CHAR(1) ;
  v_oldGrossAmt NUMBER:=0;
  v_newGrossAmt NUMBER:=0;
  v_totallines NUMBER:=0;
  v_grandtotal NUMBER:=0;
  v_oldLineAlternate NUMBER;
  v_create CHAR(1):='Y';
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


-- This trigger is used for calculate the applied offers f0r the invoice

IF (DELETING) THEN
  v_ID:=:OLD.C_INVOICE_ID;
ELSE
  v_ID:=:NEW.C_INVOICE_ID;
END IF;

  /**************************************************************************
   * Calculate Tax, etc.
   */
 SELECT processed, stdPrecision, pl.istaxincluded
   INTO v_Processed, v_Prec, v_istaxincluded
 FROM C_Invoice, C_Currency, m_pricelist pl
 WHERE C_Invoice.C_Currency_ID = C_Currency.C_Currency_ID
 AND C_Invoice.m_pricelist_id = pl.m_pricelist_id
 AND C_Invoice_ID=v_ID;
 v_oldLine:=0;
 v_newLineNetAmt:=0;
 IF(v_Processed='N') THEN
  -- Calculate taxes
  IF (v_istaxincluded = 'Y') THEN
     IF (UPDATING) THEN
        v_oldgrossamt := :old.line_gross_amount;
        v_newgrossamt := :new.line_gross_amount;
     ELSIF (INSERTING) THEN
        v_newgrossamt := :new.line_gross_amount;
     END IF;
   END IF;
  IF(UPDATING OR DELETING) THEN
  v_oldLine:= COALESCE(:old.LineNetAmt,0);
  END IF;  
  IF (INSERTING OR UPDATING) THEN
   v_newLineNetAmt := COALESCE(:new.LineNetAmt,0);
   v_newLineAlternate := COALESCE(:new.TaxBaseAmt,0);
   
   IF (UPDATING) THEN
     v_oldLineAlternate := COALESCE(:old.TaxBaseAmt,0);
     IF (:new.AD_Org_ID <> :old.AD_Org_ID OR :new.C_Tax_ID <> :old.C_Tax_ID OR
         v_newLineNetAmt <> v_oldLine OR v_newLineAlternate <> v_oldLineAlternate OR
         :new.line_gross_amount <> :old.line_gross_amount) THEN
       DELETE FROM C_INVOICELINETAX WHERE C_INVOICELINE_ID = :new.C_InvoiceLine_ID;
       v_create := 'Y';
     ELSE
       v_create := 'N';
     END IF;
   END IF;   

   IF (v_create = 'Y') THEN  
     IF(:new.C_Tax_ID IS NOT NULL) THEN
       C_INVOICELINETAX_INSERT(:new.AD_Org_ID, :new.C_Invoice_ID, :new.C_InvoiceLine_ID, :new.UpdatedBy, :new.C_Tax_ID, :new.C_Tax_ID, v_newLineNetAmt, v_newLineAlternate, v_Prec);
       IF (v_istaxincluded = 'Y') THEN
         C_INVOICELINETAX_ROUNDING(:new.C_InvoiceLine_ID, :new.line_gross_amount, v_newLineNetAmt);
       END IF;
     END IF;
    -- Get Total Tax Amt
     SELECT SUM(TaxAmt)
       INTO v_taxAmt
     FROM C_InvoiceTax
     WHERE C_Invoice_ID=:new.C_Invoice_ID;
    -- DBMS_OUTPUT.PUT_LINE('TaxAmt = ' || v_taxAmt);
     -- Update Header
         -- Get Total Tax Amt
     UPDATE C_Invoice
       SET TotalLines = TotalLines - v_oldLine + v_newLineNetAmt,
       GrandTotal = CASE v_istaxincluded
                       WHEN 'Y' THEN grandtotal - v_oldgrossamt + v_newgrossamt
                       ELSE TotalLines - v_oldLine + v_newLineNetAmt + COALESCE(v_taxAmt, 0)
                    END
     --  Updated = SysDate -- Don't update as otherwise it does not save changes
     WHERE C_Invoice_ID = :new.C_Invoice_ID;
   END IF;
  ELSE -- DELETING
   IF (v_istaxincluded = 'Y') THEN
     v_oldgrossamt := :old.line_gross_amount;
   END IF;
   SELECT SUM(TaxAmt)
     INTO v_taxAmt
   FROM C_InvoiceTax
   WHERE C_Invoice_ID=:old.C_Invoice_ID;
  -- DBMS_OUTPUT.PUT_LINE('TaxAmt = ' || v_taxAmt);
   -- Update Header
   UPDATE C_Invoice
     SET TotalLines = TotalLines - v_oldLine + v_newLineNetAmt,
     GrandTotal = CASE v_istaxincluded
                       WHEN 'Y' THEN grandtotal - v_oldgrossamt
                       ELSE TotalLines - v_oldLine + v_newLineNetAmt + COALESCE(v_taxAmt, 0)
                  END
   --  Updated = SysDate -- Don't update as otherwise it does not save changes
   WHERE C_Invoice_ID=:old.C_Invoice_ID;
  END IF;
  IF (v_istaxincluded = 'Y') THEN
    SELECT totallines, grandtotal INTO v_totallines, v_grandtotal
    FROM C_invoice
    WHERE c_invoice_id = v_id;
    C_INVOICETAX_ROUNDING(v_id, v_grandtotal, v_totallines);
  END IF;
  
 END IF;


END C_INVOICELINE_TRG2
]]></body>
    </trigger>
  </database>
